@page "/"
@inject IJSRuntime JS
@rendermode InteractiveServer


<h3>Image to Video Converter</h3>

<InputFile OnChange="HandleFileUpload" accept="image/*" />

<button @onclick="GenerateAnimatedVideo" disabled="@isProcessing">Convert</button>

@if (isProcessing)
{
    <p>Processing... Please wait.</p>
}

@if (!string.IsNullOrEmpty(VideoPath))
{
    <p>Generated Video:</p>
    <video id="videoPlayer" class="@videoAnimationClass" controls width="600" @onended="OnVideoEnded" @onplay="OnVideoPlay" @onpause="OnVideoPaused">
        <source src="@VideoPath?@DateTime.Now.Ticks" type="video/mp4">
        Your browser does not support the video tag.
    </video>
}

@code {
        // Add necessary using directives
    @using System.Net.Http;
    @using System.Text.Json;
    @using Microsoft.AspNetCore.Components.Forms;
    @using System.Threading.Tasks;
    @using System.IO;
    @using System.Text.Json.Serialization

    private IBrowserFile uploadedFile;
    private string VideoPath = "";
    private bool isProcessing = false;
    // Initialize videoClass with a default value for fade-in
    private string videoClass = "video-fade-in";  // This will control the CSS animations for the video element
    private string videoAnimationClass = "video-static";
    private string message = "";
   
    private void HandleFileUpload(InputFileChangeEventArgs e)
    {
        uploadedFile = e.File;
        Console.WriteLine($"File selected: {uploadedFile.Name}");
    }

    private async Task GenerateAnimatedVideo()
    {
        if (uploadedFile == null)
        {
            Console.WriteLine("No file selected!");
            return;
        }
        // Empty the VideoPath before starting the conversion
        VideoPath = "";
        StateHasChanged();  // Ensure UI is updated immediately

        isProcessing = true;
        try
        {
            Console.WriteLine("Uploading file to API...");

            using var content = new MultipartFormDataContent();
            using var fileStream = uploadedFile.OpenReadStream();
            content.Add(new StreamContent(fileStream), "file", uploadedFile.Name);

            using var httpClient = new HttpClient { BaseAddress = new Uri("https://localhost:7272/") };
            var response = await httpClient.PostAsync("api/convert/upload", content);

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"API Response: {result}"); // Log the result

                // Deserialize the JSON string into ConvertResponse object
                var responseObject = JsonSerializer.Deserialize<ConvertResponse>(result);

                if (responseObject != null && !string.IsNullOrEmpty(responseObject.VideoUrl))
                {
                    VideoPath = responseObject.VideoUrl;
                    Console.WriteLine($"Received Video URL: {VideoPath}");
                    StateHasChanged();
                }
                else
                {
                    Console.WriteLine("Error: Video URL is null or empty.");
                }
            }
            else
            {
                Console.WriteLine($"API Error: {response.StatusCode} - {await response.Content.ReadAsStringAsync()}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception: {ex.Message}");
        }
        finally
        {
            isProcessing = false;
            StateHasChanged();
        }
    }
    // This method is called when the video ends.
    private void OnVideoEnded()
    {
        // Change to the static class so that animations stop.
        videoAnimationClass = "video-static";
        StateHasChanged(); // Force UI update
    }

    
    public void OnVideoPaused()
    {
        videoAnimationClass = "video-static";
        StateHasChanged();
    }
    
    // When the video is played, reapply the animation.
    private void OnVideoPlay()
    {
        videoAnimationClass = "video-animation";
        StateHasChanged();
    }

    public class ConvertResponse
    {
        [JsonPropertyName("message")]
        public string Message { get; set; }

        [JsonPropertyName("videoUrl")]
        public string VideoUrl { get; set; }
    }
    
}
