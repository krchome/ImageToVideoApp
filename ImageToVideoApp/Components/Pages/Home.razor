@page "/"
@inject IJSRuntime JS
@rendermode InteractiveServer

<h3>Image to Video Converter</h3>

<div class="mb-3">
    <InputFile OnChange="@HandleFileUpload" accept="image/*" />
    <small class="text-muted d-block">Supported formats: JPG, PNG (max size: 15MB)</small>
</div>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger" role="alert">
        @errorMessage
    </div>
}

@if (!string.IsNullOrEmpty(imagePreviewUrl))
{
    <div class="my-3">
        <h4>Image Preview:</h4>
        <img src="@imagePreviewUrl" alt="Image Preview" style="max-width: 300px; margin-top: 10px;" />
        <div class="mt-2">
            <p>File: @(uploadedFile?.Name) (@(fileSize)KB)</p>
        </div>
    </div>
}

<button class="btn btn-primary" @onclick="GenerateAnimatedVideo" disabled="@(isProcessing || uploadedFile == null)">
    @if (isProcessing)
    {
        <span>Processing...</span>
    }
    else
    {
        <span>Convert</span>
    }
</button>

@if (isProcessing)
{
    <div class="progress mt-3">
        <div class="progress-bar progress-bar-striped progress-bar-animated" style="width: 100%"></div>
    </div>
}

@if (!string.IsNullOrEmpty(VideoPath))
{
    <div class="mt-4">
        <h4>Generated Video:</h4>
        <video id="videoPlayer" class="@videoAnimationClass" controls width="600" @onended="OnVideoEnded" @onplay="OnVideoPlay" @onpause="OnVideoPaused">
            <source src="@VideoPath?v=@DateTime.Now.Ticks" type="video/mp4">
            Your browser does not support the video tag.
        </video>

        <div class="mt-3">
            <a href="@VideoPath" class="btn btn-success" download>Download Video</a>
        </div>
    </div>
}

@code {
    @using System.Net.Http;
    @using System.Text.Json;
    @using Microsoft.AspNetCore.Components.Forms;
    @using System.Threading.Tasks;
    @using System.IO;
    @using System.Text.Json.Serialization;

    private IBrowserFile uploadedFile;
    private string VideoPath = "";
    private bool isProcessing = false;
    private string videoAnimationClass = "video-static";
    private string imagePreviewUrl;
    private string errorMessage;
    private long fileSize;

    // Maximum file size (15MB)
    private const long MaxFileSize = 15 * 1024 * 1024;

    private async Task HandleFileUpload(InputFileChangeEventArgs e)
    {
        try
        {
            // Clear previous errors
            errorMessage = null;

            // Get the uploaded file
            uploadedFile = e.File;
            fileSize = uploadedFile.Size / 1024; // Size in KB

            Console.WriteLine($"File selected: {uploadedFile.Name}, Size: {fileSize}KB, Content type: {uploadedFile.ContentType}");

            // Check file size
            if (uploadedFile.Size > MaxFileSize)
            {
                errorMessage = $"File size exceeds the maximum allowed limit of {MaxFileSize / (1024 * 1024)}MB.";
                uploadedFile = null;
                imagePreviewUrl = null;
                return;
            }

            // Generate image preview - handle both JPG and PNG
            var format = uploadedFile.ContentType.Contains("png") ? "image/png" : "image/jpeg";
            var maxWidth = 300;
            var maxHeight = 300;

            var resizedImageFile = await uploadedFile.RequestImageFileAsync(format, maxWidth, maxHeight);
            var buffer = new byte[resizedImageFile.Size];

            // Use a memory stream to properly handle the file data
            using (var ms = new MemoryStream())
            {
                var stream = resizedImageFile.OpenReadStream(maxAllowedSize: MaxFileSize);
                await stream.CopyToAsync(ms);
                buffer = ms.ToArray();
            }

            // Set the image preview URL with the correct MIME type
            imagePreviewUrl = $"data:{uploadedFile.ContentType};base64,{Convert.ToBase64String(buffer)}";

            // Force UI update
            StateHasChanged();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error processing image: {ex.Message}";
            Console.WriteLine($"Error in HandleFileUpload: {ex.Message}");
            Console.WriteLine(ex.StackTrace);
            uploadedFile = null;
            imagePreviewUrl = null;
        }
    }

    private async Task GenerateAnimatedVideo()
    {
        if (uploadedFile == null)
        {
            errorMessage = "Please select an image file first.";
            return;
        }

        // Clear previous results and errors
        VideoPath = "";
        errorMessage = null;
        StateHasChanged();

        isProcessing = true;
        try
        {
            Console.WriteLine("Uploading file to API...");

            // Use a simpler approach to stream handling
            var content = new MultipartFormDataContent();

            // Read the file into a byte array
            var stream = uploadedFile.OpenReadStream(maxAllowedSize: MaxFileSize);
            var ms = new MemoryStream();
            await stream.CopyToAsync(ms);
            var fileBytes = ms.ToArray();

            // Create a ByteArrayContent from the file bytes
            var fileContent = new ByteArrayContent(fileBytes);
            fileContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(uploadedFile.ContentType);

            // Add the file content to the form
            content.Add(fileContent, "file", uploadedFile.Name);

            using var httpClient = new HttpClient();
            httpClient.BaseAddress = new Uri("https://localhost:7272/");
            httpClient.Timeout = TimeSpan.FromMinutes(5);

            // Log the request details
            Console.WriteLine($"Sending file to API: {uploadedFile.Name} ({fileBytes.Length} bytes)");

            var response = await httpClient.PostAsync("api/convert/upload", content);

            // Log response status
            Console.WriteLine($"Response status: {response.StatusCode}");

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"API Response: {result}");

                try
                {
                    // Deserialize the JSON response
                    var responseObject = JsonSerializer.Deserialize<ConvertResponse>(result);

                    if (responseObject != null && !string.IsNullOrEmpty(responseObject.VideoUrl))
                    {
                        VideoPath = responseObject.VideoUrl;
                        Console.WriteLine($"Received Video URL: {VideoPath}");
                    }
                    else
                    {
                        errorMessage = "Error: The server returned an invalid response.";
                        Console.WriteLine("Error: Video URL is null or empty.");
                    }
                }
                catch (JsonException jex)
                {
                    errorMessage = "Error parsing the server response.";
                    Console.WriteLine($"JSON parsing error: {jex.Message}");
                }
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                errorMessage = $"Server error: {response.StatusCode}. Details: {errorContent}";
                Console.WriteLine($"API Error: {response.StatusCode} - {errorContent}");
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error: {ex.Message}";
            Console.WriteLine($"Exception: {ex.Message}");
            Console.WriteLine(ex.StackTrace);
        }
        finally
        {
            isProcessing = false;
            StateHasChanged();
        }
    }

    // Video player event handlers
    private void OnVideoEnded()
    {
        videoAnimationClass = "video-static";
        StateHasChanged();
    }

    public void OnVideoPaused()
    {
        videoAnimationClass = "video-static";
        StateHasChanged();
    }

    private void OnVideoPlay()
    {
        videoAnimationClass = "video-animation";
        StateHasChanged();
    }

    public class ConvertResponse
    {
        [JsonPropertyName("message")]
        public string Message { get; set; }

        [JsonPropertyName("videoUrl")]
        public string VideoUrl { get; set; }
    }
}